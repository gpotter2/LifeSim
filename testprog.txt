struct Oiseau {
    x: rand [-100., 100.];
    y: rand [-100., 100.];
    vx: rand [-5., 5.];
    vy: rand [-5., 5.];
    ax: rand [-0.5, 0.5];
    ay: rand [-0.5, 0.5];
}

// Comportement: inertie
let maxSpeed = 10. in
let unit a b = a / (a^2. + b^2.)^0.5 * maxSpeed in
Oiseau x <=> _ do {
    let ivx = x.vx + x.ax in
    let ivy = x.vy + x.ay in
    let nrm = (ivx^2. + ivy^2.)^0.5 in
    let vx = if nrm > maxSpeed then unit ivx ivy else ivx in
    let vy = if nrm > maxSpeed then unit ivy ivx else ivy in
    Oiseau {
        x: x.x + x.vx;
        y: x.y + x.vy;
        vx: vx;
        vy: vy;
        ax: 0.;
        ay: 0.;
    }
}

// Comportement: alignement
// -> Des points proches s'alignent dans la même direction
let close a b = (a.x - b.x) < 10.0 in
let unit a b = a / (a^2. + b^2.)^0.5 in
Oiseau x <=> Oiseau list L if close x do {
    let length = len L in
    let sx = (sum (fun e -> e.vx) of L) / length in
    let sy = (sum (fun e -> e.vy) of L) / length in
    let ax = (unit sx sy) - x.vx in
    let ay = (unit sy sx) - x.vy in
    Oiseau {
        // On ne touche pas à la position et à la vitesse
        x: x.x;
        y: x.y;
        vx: x.vx;
        vy: x.vy;
        // On met la nouvelle accélération
        ax: x.ax + ax;
        ay: x.ay + ax;
    }
}

// Comportement: cohésion
// -> Les points essaient de se diriger vers le centre du groupe de leurs voisins 
let close a b = (a.x - b.x) < 10.0 in
let unit a b = a / (a^2. + b^2.)^(0.5) in
Oiseau x <=> Oiseau list L if close x do {
    let length = len L in
    let sx = (sum (fun e -> e.x) of L) / length in
    let sy = (sum (fun e -> e.y) of L) / length in
    let ax = (unit sx sy) - x.x in
    let ay = (unit sy sx) - x.y in
    Oiseau {
        // On ne touche pas à la position et à la vitesse
        x: x.x;
        y: x.y;
        vx: x.vx;
        vy: x.vy;
        // On met la nouvelle accélération
        ax: x.ax + ax / 50.;
        ay: x.ay + ay / 50.;
    }
}

//Comportement: bords
let xWallLeft = -190. in
let xWallRight = 190. in
let yWallBot  = -190. in
let yWallTop  = 190. in
Oiseau x <=> _ do {
    let deltaX = if x.x > xWallRight then (xWallRight - x.x) else (if x.x < xWallLeft then (xWallLeft - x.x) else 0.) in
    let deltaY = if x.y > yWallTop then (yWallTop - x.y) else (if x.y < yWallBot then (yWallBot - x.y) else 0.) in
    Oiseau {
        x: x.x;
        y: x.y;
        vx: x.vx;
        vy: x.vy;
        ax: x.ax + 20. * deltaX / (deltaX ^ 2. + 1.);
        ay: x.ay + 20. * deltaY / (deltaY ^ 2. + 1.);
    }
}

init {
    Oiseau: 10;
};