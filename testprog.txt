struct Oiseau {
    x: rand [-100., 100.];
    y: rand [-100., 100.];
    vx: rand [-5., 5.];
    vy: rand [-5., 5.];
    ax: rand [-0.5, 0.5];
    ay: rand [-0.5, 0.5];
}

// Comportement: inertie
let maxSpeed = 5. in
let unit a b = a / (a^2. + b^2.)^0.5 * maxSpeed in
Oiseau x <=> _ do {
    let ivx = x.vx + x.ax in
    let ivy = x.vy + x.ay in
    let nrm = (ivx^2. + ivy^2.)^0.5 in
    let vx = if nrm > maxSpeed then unit ivx ivy else ivx in
    let vy = if nrm > maxSpeed then unit ivy ivx else ivy in
    Oiseau {
        x: x.x + x.vx;
        y: x.y + x.vy;
        vx: vx;
        vy: vy;
        ax: 0.;
        ay: 0.;
    }
}

// Comportement: alignement
// -> Des points proches s'alignent dans la même direction
let close a b = (a.x - b.x)^2. + (a.y - b.y)^2. < 10000.0 in
let maxSpeed = 5. in
let unit a b = a / (a^2. + b^2.)^0.5 * maxSpeed in
Oiseau x <=> Oiseau list L if close x do {
    let length = len L in
    let sx = (sum (fun e -> e.vx) of L) / length in
    let sy = (sum (fun e -> e.vy) of L) / length in
    let ax = (unit sx sy) - x.vx in
    let ay = (unit sy sx) - x.vy in
    Oiseau {
        // On ne touche pas à la position et à la vitesse
        x: x.x;
        y: x.y;
        vx: x.vx;
        vy: x.vy;
        // On met la nouvelle accélération
        ax: x.ax + ax;
        ay: x.ay + ay;
    }
}

// Comportement: cohésion
// -> Les points essaient de se diriger vers le centre du groupe de leurs voisins 
let close a b = (a.x - b.x)^2. + (a.y - b.y)^2. < 10000.0 in
let maxSpeed = 5. in
let maxAcc = 1. in
let unit a b = a / (a^2. + b^2.)^0.5 in
Oiseau x <=> Oiseau list L if close x do {
    let length = len L in
    let sx = (sum (fun e -> e.x) of L) / length in
    let sy = (sum (fun e -> e.y) of L) / length in
    let uax = (unit sx sy) * maxSpeed - x.x in
    let uay = (unit sy sx) * maxSpeed - x.y in
    let ax = (unit uax uay) * maxAcc in
    let ay = (unit uay uax) * maxAcc  in
    Oiseau {
        // On ne touche pas à la position et à la vitesse
        x: x.x;
        y: x.y;
        vx: x.vx;
        vy: x.vy;
        // On met la nouvelle accélération
        ax: x.ax + ax;
        ay: x.ay + ay;
    }
}

// Comportement: séparation
let close a b = ((a.x - b.x)^2. + (a.y - b.y)^2.) < 100.0 in
let unit a b = a / (a^2. + b^2.)^0.5 in
Oiseau x <=> Oiseau list L if close x do {
    let length = len L in
    let sx = x.x - (sum (fun e -> e.x) of L) / length in
    let sy = x.y - (sum (fun e -> e.y) of L) / length in
    let ax = unit sx sy in
    let ay = unit sy sx in
    Oiseau {
        // On ne touche pas à la position et à la vitesse
        x: x.x;
        y: x.y;
        vx: x.vx;
        vy: x.vy;
        // On met la nouvelle accélération
        ax: x.ax + ax * 2.;
        ay: x.ay + ay * 2.;
    }
}

init {
    Oiseau: 10;
};